function [y1] = BlackBox_X(x1)
%BLACKBOX_X neural network simulation function.
%
% Auto-generated by MATLAB, 20-Jan-2023 13:55:45.
% 
% [y1] = BlackBox_X(x1) takes these arguments:
%   x = 6xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2 3];
x1_step2.xoffset = [10.0119839684004;10.0065866758611;-9.99738929317946];
x1_step2.gain = [0.200281562308473;0.200266191530816;0.400345740015214];
x1_step2.ymin = -1;

% Layer 1
b1 = [2.7789671667745041717;2.3732897390513207903;-2.1758868642491182577;0.58862980487364191529;0.7704939550914158275;1.6754500565262930856;-0.74179017976227890063;-1.9237962453455916823;3.7206018673522711637;4.0295964807024411414];
IW1_1 = [-0.0034228697957341749913 1.4106060753050302381 0.64881978379913141097;-1.5064996450186014521 -0.53907713519635802601 -0.083865207100325800393;2.190739508533651847 -0.82514095656841202064 1.1646831943469562187;-2.8140225331406205633 -0.81837442456441267247 0.77127026532072917586;-1.8329253774060589866 -1.7448340660203334185 0.86753279271103178605;1.2340782398224545702 0.4105714362797322492 -1.1022150426668044787;0.71473326515340973586 0.53966080636443392038 -2.8801500851321630847;-0.93697824976798871344 -2.8113335651922479741 -0.54671322307899516968;1.2560393858229677022 -0.73868390285429641473 -2.1214184117813830177;1.5258430243390115333 -1.3258861769686833831 1.1401366713626626126];

% Layer 2
b2 = [0.36069895552347464029;-0.58506354387692871555;-0.69834402236740333869;-0.3947932033381029715;-0.96124475651965701761];
LW2_1 = [-0.86131166595399366592 -0.44514477970053323297 0.45117404485310108608 -0.42225007549984222566 -0.052880913185193154091 0.750646072285950261 -0.45677887813237272319 -0.4311953212197268126 0.013460669267181684522 -0.56618394060730914408;0.57027753940697334389 0.012207440513549385266 -0.02176300229652142898 -0.08190075461398582668 0.080522948687676038082 0.039128275124662534323 -0.034721886017055017537 0.053685855345268755634 0.19148737534743862088 0.20618345901114518148;0.66798327087688280645 -0.42727759689944777577 -0.17532537626913746731 -0.082397037855401963902 0.15991727714437808938 0.033024297240380195984 0.037143477391314655423 -0.035882678060930914277 0.038011248987740983707 -0.12753517771475164633;0.0042494630974142400676 0.64663715439546287644 0.11334452119587971886 0.027208565452016251346 -0.13219548821508286807 0.023542211920655004009 -0.021223279607652422579 0.053679988832452688041 -0.16472206695254854036 0.19012883812982514509;0.54670646885242857316 -0.26150143588658292249 -0.042376584554713540853 -0.020428604626666818644 0.056198807298127193 -0.047065307784117126066 0.014969316283431864656 0.035937381039098451052 0.13871275044557662692 -0.047060191863316599981];

% Output 1
y1_step2.ymin = -1;
y1_step2.gain = [185.048332324239;4.5621988772034;0.555165653599514;0.162514424060834;0.094804875916963];
y1_step2.xoffset = [-0.00372975152413633;-0.329212688700867;-0.954408665272128;-7.0265210491973;-4.26597949146038];
y1_step1.xrows = 6;
y1_step1.keep = [2 3 4 5 6];
y1_step1.remove = 1;
y1_step1.constants = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = removeconstantrows_apply(x1,x1_step1);
xp1 = mapminmax_apply(xp1,x1_step2);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step2);
y1 = removeconstantrows_reverse(y1,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
  y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end

% Remove Constants Output Reverse-Processing Function
function x = removeconstantrows_reverse(y,settings)
  Q = size(y,2);
  x = nan(settings.xrows,Q,'like',y);
  x(settings.keep,:) = y;
  x(settings.remove,:) = repmat(settings.constants,1,Q);
end
