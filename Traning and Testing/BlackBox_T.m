function [y1] = BlackBox_T(x1)
%BLACKBOX_T neural network simulation function.
%
% Auto-generated by MATLAB, 20-Jan-2023 13:56:03.
% 
% [y1] = BlackBox_T(x1) takes these arguments:
%   x = 6xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2 3];
x1_step2.xoffset = [10.0119839684004;10.0065866758611;-9.99738929317946];
x1_step2.gain = [0.200281562308473;0.200266191530816;0.400345740015214];
x1_step2.ymin = -1;

% Layer 1
b1 = [-2.9981241031236360861;-2.5276598001923535897;-1.5552805402536369339;-0.91571601619650588866;-0.32131450097367042495;-0.43663489316803144602;0.80831692940851618268;-1.7584118465004578979;-2.3593734236783383551;2.9404517950295168127];
IW1_1 = [0.59190891937530276667 -1.0748771483163770402 2.8175870955970938603;1.9931430791817434933 -1.6547835887206099326 1.3809410790092275789;1.6542448731616481439 -2.4298031335243783779 -0.55812685082591606545;0.12819602984591374484 2.2472245530610015507 -2.0998882214207994501;2.3527794848759695512 1.063167806534981219 1.5777920639334466202;-1.8654450380747429339 1.4825856170449573934 -1.7228043794521106236;1.1937801000345735769 2.3177987948160234666 1.5524242357339410603;-1.8816640763514458357 2.237204321412744612 -0.18576087420695064356;-1.5741281024371711617 2.377027377669122199 0.79131154822809746108;1.8337405994829585332 -1.3824306359961691104 -1.9536824395145224731];

% Layer 2
b2 = [0.044665835843709533748;-0.40765635342798800522;-0.074436223431312287246;0.86580914829110877662;-0.56822171540794874645];
LW2_1 = [0.062898482719160542231 -0.77194312864385827844 0.38857249513111091765 0.50466812030282293122 -0.69272033821488721017 0.83784686402110475356 0.46570872775310534486 -0.3257133717732467737 0.37188941687768917177 -0.17763021862227490466;0.26760171638791963034 -0.11491769669964146949 -0.58638694595816787114 0.78980158445901604836 -0.94219586866980087336 0.4671488867462447736 -0.76647849791696920363 0.16864996087267525304 -0.4653498898084909019 -0.52702162576915867476;-0.97180799163461517587 0.31909577632310526241 0.10952465191347759976 0.6836883461297804665 -0.98183020301637258243 -0.39770609579830318303 0.49208312651520325076 -0.062095790088121383121 0.93896712918490532473 -0.60988935463782967261;0.1324296710641928998 -0.19091201128247672902 0.14298230157591906853 -0.083778421675248085365 -0.031732610965412882953 0.16351311036952537181 0.17421676275700748171 -0.28187195435541928523 0.27248077317813312881 0.13870465179898375241;0.77265194233621170561 0.90073680302979974854 0.11571538143959192446 -0.62169213229602271475 0.21809864876761531072 -0.48367395300323789975 0.49046736242332422684 0.65743485232014475805 -0.40011815411020412725 -0.63890349266831458763];

% Output 1
y1_step2.ymin = -1;
y1_step2.gain = [4686828518015.21;374133784699.258;90940265302.8709;2.00000000000187;171171290827.129];
y1_step2.xoffset = [1.67631096075692e-64;-5.34568136263789e-12;2.48304599177262e-35;8.10047029975428e-21;2.45592342000753e-15];
y1_step1.xrows = 6;
y1_step1.keep = [2 3 4 5 6];
y1_step1.remove = 1;
y1_step1.constants = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = removeconstantrows_apply(x1,x1_step1);
xp1 = mapminmax_apply(xp1,x1_step2);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step2);
y1 = removeconstantrows_reverse(y1,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
  y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end

% Remove Constants Output Reverse-Processing Function
function x = removeconstantrows_reverse(y,settings)
  Q = size(y,2);
  x = nan(settings.xrows,Q,'like',y);
  x(settings.keep,:) = y;
  x(settings.remove,:) = repmat(settings.constants,1,Q);
end
